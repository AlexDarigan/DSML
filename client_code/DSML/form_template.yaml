is_package: true
container:
  type: HtmlTemplate
  properties: {html: '@theme:standard-page.html'}
components:
- type: ColumnPanel
  properties: {}
  name: content_panel
  layout_properties: {slot: default}
  components:
  - name: intro_title
    properties: {text: Introduction / Mission Statement, bold: true, font_size: 18}
    type: Label
    layout_properties: {grid_position: 'KVMYIG,NVVJCF'}
  - name: rich_text_1
    properties: {content: "A [REST](https://en.wikipedia.org/wiki/REST)ful API to\
        \ serve Magic: The Gathering cards statistics. \n\n[Magic: The Gathering (M:TG)\
        \ is a trading card game created in 1993 by Richard  Garfield](https://www.mopop.org/resources/archive/landing-pages/science-fiction-and-fantasy-hall-of-fame/sffhof-members/magic-the-gathering/).\
        \ There are over [25,000 cards that exist for M:TG as of 2023](https://mtg.fandom.com/wiki/Magic:_The_Gathering)\
        \ A number of these cards are noteworthy for being exceptionally expensive,\
        \ such as a copy of [\u201cBlack Lotus\u201d selling for $540,000](https://www.ign.com/articles/magic-the-gatherings-most-sought-after-card-sells-for-record-540000\n\
        ). While Black Lotus is an exceptional case, many M:TG cards fluctuate in\
        \ price as the context of the game changes. This project is intended to serve\
        \ statistical data regarding M:TG card attributes and prices.", font_size: null}
    type: RichText
    layout_properties: {grid_position: 'MYRQEI,TWGUOD'}
  - name: layout_title
    properties: {text: REST Project Design, font_size: 18, bold: true}
    type: Label
    layout_properties: {grid_position: 'RNJQRH,PXXUUW'}
  - name: api_design
    properties: {content: "*You can find more detail on the [REST API](https://github.com/AlexDarigan/DataScience-MachineLearning/wiki)\
        \ for this Project*\n\nThe primary navigation area of the project will be\
        \ on the API Hostname as of the projects \nversion at that time.\n\n| Host\
        \         | Version |\n|--------------|---------|\n| api.hostname | 1    \
        \   |\n&nbsp;\nThis project will be a set of projects that exist as a single\
        \ RESTful API. Each project shares the same general following structure\n\n\
        | Attribute        | Description                                         \
        \          |\n|------------------|---------------------------------------------------------------|\n\
        | Title            | The project title                                   \
        \          |\n| Description      | A brief description of the project    \
        \                        |\n| HTTP Route       | The HTTP Route of the project\
        \                                 |\n| Resources        | A tabled list of\
        \ HTTP Resources                               |\n| Query Parameters | A optional\
        \ tabled set of HTTP query parameters                |\n| Technologies   \
        \  | The technologies used in the project (e.g python)             |\n| Libraries\
        \        | The libraries used in the project (e.g pandas)                |\n\
        | Data Sources     | The data sources used for that project (e.g scryfall[4])\
        \      |\n| Data Storage     | How and where our transformed data is stored\
        \ (e.g CSV, Cloud) |\n\nAn example request is of the form {api.hostname}/{project}/{resource(s)}\n\
        \n__Example Request__\n\n```\nGET api.hostname/stats/colors \n```\n\n__Example\
        \ Response__\n\n```json\n{\n\t\"mode\": \"green\",\n\t\"median\": \"red\"\
        ,\n\t\"mean\": \"blue\"\n}\n```\n\n\n"}
    type: RichText
    layout_properties: {grid_position: 'VIYDBF,EMCBNT'}
    components: []
  - name: label_2
    properties: {text: 'Data Sources

        ', bold: true, font_size: 20}
    type: Label
    layout_properties: {grid_position: 'YDTNBT,EVMJCO'}
  - name: rich_text_2
    properties: {content: "The data for this project is sourced from the [Scryfall\
        \ API](https://scryfall.com/docs/api) via the following python code taken\
        \ from this [Google Colabatory Jupyter notebook](https://colab.research.google.com/drive/1vmHmr_NLMDIArpOZ1mRr2XEBm6vwKsEO?usp=sharing)\n\
        \nWe are first accessing the [bulk-data](https://scryfall.com/docs/api/bulk-data)\
        \ object that contains a link to a json file for every card printed in English\
        \ (or a single language if no English version exists).\n\nSecondly, we extract\
        \ the download link and make a streaming request to that in order to download\
        \ all of the data as a json object before we process it any further. \n\n\n\
        \n```python\n# GET BULK DATA\nresponse = requests.get(\"https://api.scryfall.com/bulk-data/default-cards\"\
        )\nif response.status_code != 200:\n  print(\"Response failed with status\
        \ code \" + str(response.status_code))\ndata = response.json()\n\n# DOWNLOAD\
        \ CARD DATA\ndownload = data[\"download_uri\"]\ndownloaded = requests.get(download,\
        \ stream=True)\nif downloaded.status_code != 200:\n  print(\"Download failed\
        \ with status code: \" + str(downloaded.status_code))\n\n# 88666 cards from\
        \ bulk-data/default-cards\ncards = downloaded.json()\n```"}
    type: RichText
    layout_properties: {grid_position: 'KBNZMF,AXUURG'}
  - name: preprocessing
    properties: {text: Data Preprocessing, font_size: 18, bold: true}
    type: Label
    layout_properties: {grid_position: 'SAWPHE,UBYGTU'}
  - name: rich_text_5
    properties: {content: "\nUsing the [pandas](https://pandas.pydata.org/) as pd,\
        \ we call [json_normalize](https://pandas.pydata.org/docs/reference/api/pandas.json_normalize.html)\
        \ in order to flattern some of our nested keys into a key.internalkey format\n\
        ```python\ndf = pd.json_normalize(cards)\n```\n\n*Example*\n```\n{{ \"prices\"\
        : {{ \"usd\": 0.49 } }} -> {{ \"prices.usd\": 0.49 }} \n```\n&nbsp;\nDates\
        \ are stored as strings but if we want to filter by date ranges, we should\
        \ change them to datetime because it is numerical nature. \n```\ndf[\"released_at\"\
        ] = pd.to_datetime(df[\"released_at\"], errors='coerce')\n```\n&nbsp;\nThe\
        \ next properties (cmc stands for \"converted mana cost\") are all numeric,\
        \ however not all cards have these values (non-creatures do not have power/toughness\
        \ & lands do not have a cmc). As it stands, I am storing this data on a structured\
        \ database, so those values must evaluate to something otherwise the database\
        \ will complain. So in this case I covert what I can to a numeric value, and\
        \ if it isn't applicable, we use [fillna](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html)\
        \ to default the values to 0 (when analyzing the data further, we'll just\
        \ have to add conditions to differentiate 0-value cards with cards that don't\
        \ have that value, e.g 0-cost cards vs lands)\n```\ndf[\"cmc\"] = pd.to_numeric(df[\"\
        cmc\"], errors='coerce').fillna(0)\ndf[\"power\"] = pd.to_numeric(df[\"power\"\
        ], errors='coerce').fillna(0)\ndf[\"toughness\"] = pd.to_numeric(df[\"toughness\"\
        ], errors='coerce').fillna(0)\n```\n&nbsp;\nMTG card have five colors (and\
        \ a sixth \"colorless\" color) but they are stored as a list of strings in\
        \ Scryfall because some cards may have more than one color. Below I am creating\
        \ six new attributes on my dataframe, a boolean for each possible color and\
        \ apply a function against each card's color list, six times (one per color).\
        \ Colorless  values are not stored in the list but as they represent the lack\
        \ of any color, we can decide if something is colorless if it has an empty\
        \ color list.\n```\ndf[\"red\"] = df[\"colors\"].apply(lambda x: type(x) is\
        \ list and \"R\" in x)\ndf[\"blue\"] = df[\"colors\"].apply(lambda x: type(x)\
        \ is list and  \"U\" in x)\ndf[\"green\"] = df[\"colors\"].apply(lambda x:\
        \ type(x) is list and \"G\" in x)\ndf[\"white\"] = df[\"colors\"].apply(lambda\
        \ x: type(x) is list and \"W\" in x)\ndf[\"black\"] = df[\"colors\"].apply(lambda\
        \ x: type(x) is list and \"B\" in x)\ndf[\"colorless\"] = df[\"colors\"].apply(lambda\
        \ x: type(x) is list and len(x) == 0)\n```\n&nbsp;\nOne related project to\
        \ this data is to follow \n```\ndf[\"standard\"] = df[\"legalities.standard\"\
        ] == \"legal\"\ndf[\"modern\"] = df[\"legalities.modern\"] == \"legal\"\n\
        df[\"vintage\"] = df[\"legalities.vintage\"] == \"legal\"\ndf[\"legacy\"]\
        \ = df[\"legalities.legacy\"] == \"legal\"\n```"}
    type: RichText
    layout_properties: {grid_position: 'YGBEEL,HUTIZN'}
  - name: charts_title
    properties: {text: Example Charts, font_size: 18, bold: true}
    type: Label
    layout_properties: {grid_position: 'KLKFBY,KURKJR'}
  - name: rich_text_3
    properties: {content: 'A

        B

        C

        D'}
    type: RichText
    layout_properties: {grid_position: 'OMEBUL,LAAMPK'}
  - name: exp_title
    properties: {text: Opportunities & Challenges, font_size: 18, bold: true}
    type: Label
    layout_properties: {grid_position: 'QREEPX,ZMMPVI'}
  - name: rich_text_6
    properties: {content: 'A

        B

        C

        D'}
    type: RichText
    layout_properties: {grid_position: 'HICSKV,DYMSAH'}
  - name: colors_plot
    properties: {}
    type: Plot
    layout_properties: {grid_position: 'KIEFUK,CIYYRS'}
  - name: flow_panel_1
    properties: {}
    type: FlowPanel
    layout_properties: {grid_position: 'WEGTRM,ELDZDK'}
    components:
    - name: release_plot
      properties: {interactive: false, height: '800'}
      type: Plot
      data_bindings: []
- type: FlowPanel
  properties: {}
  name: navbar_links
  layout_properties: {slot: nav-right}
  components:
  - name: links_1
    properties: {}
    type: form:Links
- name: label_1
  properties: {text: Projects}
  type: Label
  layout_properties: {slot: title}
- name: menu_1
  properties: {}
  type: form:Menu
  layout_properties: {slot: left-nav}
